// Code generated by counterfeiter. DO NOT EDIT.
package lidarfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/lidar"
)

type FakeRateCalculator struct {
	RateLimiterStub        func() (lidar.Limiter, error)
	rateLimiterMutex       sync.RWMutex
	rateLimiterArgsForCall []struct {
	}
	rateLimiterReturns struct {
		result1 lidar.Limiter
		result2 error
	}
	rateLimiterReturnsOnCall map[int]struct {
		result1 lidar.Limiter
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRateCalculator) RateLimiter() (lidar.Limiter, error) {
	fake.rateLimiterMutex.Lock()
	ret, specificReturn := fake.rateLimiterReturnsOnCall[len(fake.rateLimiterArgsForCall)]
	fake.rateLimiterArgsForCall = append(fake.rateLimiterArgsForCall, struct {
	}{})
	fake.recordInvocation("RateLimiter", []interface{}{})
	fake.rateLimiterMutex.Unlock()
	if fake.RateLimiterStub != nil {
		return fake.RateLimiterStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rateLimiterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRateCalculator) RateLimiterCallCount() int {
	fake.rateLimiterMutex.RLock()
	defer fake.rateLimiterMutex.RUnlock()
	return len(fake.rateLimiterArgsForCall)
}

func (fake *FakeRateCalculator) RateLimiterCalls(stub func() (lidar.Limiter, error)) {
	fake.rateLimiterMutex.Lock()
	defer fake.rateLimiterMutex.Unlock()
	fake.RateLimiterStub = stub
}

func (fake *FakeRateCalculator) RateLimiterReturns(result1 lidar.Limiter, result2 error) {
	fake.rateLimiterMutex.Lock()
	defer fake.rateLimiterMutex.Unlock()
	fake.RateLimiterStub = nil
	fake.rateLimiterReturns = struct {
		result1 lidar.Limiter
		result2 error
	}{result1, result2}
}

func (fake *FakeRateCalculator) RateLimiterReturnsOnCall(i int, result1 lidar.Limiter, result2 error) {
	fake.rateLimiterMutex.Lock()
	defer fake.rateLimiterMutex.Unlock()
	fake.RateLimiterStub = nil
	if fake.rateLimiterReturnsOnCall == nil {
		fake.rateLimiterReturnsOnCall = make(map[int]struct {
			result1 lidar.Limiter
			result2 error
		})
	}
	fake.rateLimiterReturnsOnCall[i] = struct {
		result1 lidar.Limiter
		result2 error
	}{result1, result2}
}

func (fake *FakeRateCalculator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rateLimiterMutex.RLock()
	defer fake.rateLimiterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRateCalculator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lidar.RateCalculator = new(FakeRateCalculator)
