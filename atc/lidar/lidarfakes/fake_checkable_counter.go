// Code generated by counterfeiter. DO NOT EDIT.
package lidarfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/lidar"
)

type FakeCheckableCounter struct {
	CheckableCountStub        func() (int, error)
	checkableCountMutex       sync.RWMutex
	checkableCountArgsForCall []struct {
	}
	checkableCountReturns struct {
		result1 int
		result2 error
	}
	checkableCountReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckableCounter) CheckableCount() (int, error) {
	fake.checkableCountMutex.Lock()
	ret, specificReturn := fake.checkableCountReturnsOnCall[len(fake.checkableCountArgsForCall)]
	fake.checkableCountArgsForCall = append(fake.checkableCountArgsForCall, struct {
	}{})
	fake.recordInvocation("CheckableCount", []interface{}{})
	fake.checkableCountMutex.Unlock()
	if fake.CheckableCountStub != nil {
		return fake.CheckableCountStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkableCountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCheckableCounter) CheckableCountCallCount() int {
	fake.checkableCountMutex.RLock()
	defer fake.checkableCountMutex.RUnlock()
	return len(fake.checkableCountArgsForCall)
}

func (fake *FakeCheckableCounter) CheckableCountCalls(stub func() (int, error)) {
	fake.checkableCountMutex.Lock()
	defer fake.checkableCountMutex.Unlock()
	fake.CheckableCountStub = stub
}

func (fake *FakeCheckableCounter) CheckableCountReturns(result1 int, result2 error) {
	fake.checkableCountMutex.Lock()
	defer fake.checkableCountMutex.Unlock()
	fake.CheckableCountStub = nil
	fake.checkableCountReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCheckableCounter) CheckableCountReturnsOnCall(i int, result1 int, result2 error) {
	fake.checkableCountMutex.Lock()
	defer fake.checkableCountMutex.Unlock()
	fake.CheckableCountStub = nil
	if fake.checkableCountReturnsOnCall == nil {
		fake.checkableCountReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.checkableCountReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCheckableCounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkableCountMutex.RLock()
	defer fake.checkableCountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCheckableCounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lidar.CheckableCounter = new(FakeCheckableCounter)
