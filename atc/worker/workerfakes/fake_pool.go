// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"context"
	"sync"
	"time"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/db"
	"github.com/concourse/concourse/atc/worker"
)

type FakePool struct {
	CreateVolumeStub        func(lager.Logger, worker.VolumeSpec, worker.WorkerSpec, db.VolumeType) (worker.Volume, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 lager.Logger
		arg2 worker.VolumeSpec
		arg3 worker.WorkerSpec
		arg4 db.VolumeType
	}
	createVolumeReturns struct {
		result1 worker.Volume
		result2 error
	}
	createVolumeReturnsOnCall map[int]struct {
		result1 worker.Volume
		result2 error
	}
	FindContainerStub        func(lager.Logger, int, string) (worker.Container, bool, error)
	findContainerMutex       sync.RWMutex
	findContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}
	findContainerReturns struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	findContainerReturnsOnCall map[int]struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	FindVolumeStub        func(lager.Logger, int, string) (worker.Volume, bool, error)
	findVolumeMutex       sync.RWMutex
	findVolumeArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}
	findVolumeReturns struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}
	findVolumeReturnsOnCall map[int]struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}
	ReleaseWorkerStub        func(context.Context, worker.ContainerSpec, worker.Client, worker.ContainerPlacementStrategy)
	releaseWorkerMutex       sync.RWMutex
	releaseWorkerArgsForCall []struct {
		arg1 context.Context
		arg2 worker.ContainerSpec
		arg3 worker.Client
		arg4 worker.ContainerPlacementStrategy
	}
	SelectWorkerStub        func(context.Context, db.ContainerOwner, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy, worker.PoolCallbacks) (worker.Client, time.Duration, error)
	selectWorkerMutex       sync.RWMutex
	selectWorkerArgsForCall []struct {
		arg1 context.Context
		arg2 db.ContainerOwner
		arg3 worker.ContainerSpec
		arg4 worker.WorkerSpec
		arg5 worker.ContainerPlacementStrategy
		arg6 worker.PoolCallbacks
	}
	selectWorkerReturns struct {
		result1 worker.Client
		result2 time.Duration
		result3 error
	}
	selectWorkerReturnsOnCall map[int]struct {
		result1 worker.Client
		result2 time.Duration
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePool) CreateVolume(arg1 lager.Logger, arg2 worker.VolumeSpec, arg3 worker.WorkerSpec, arg4 db.VolumeType) (worker.Volume, error) {
	fake.createVolumeMutex.Lock()
	ret, specificReturn := fake.createVolumeReturnsOnCall[len(fake.createVolumeArgsForCall)]
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 lager.Logger
		arg2 worker.VolumeSpec
		arg3 worker.WorkerSpec
		arg4 db.VolumeType
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateVolumeStub
	fakeReturns := fake.createVolumeReturns
	fake.recordInvocation("CreateVolume", []interface{}{arg1, arg2, arg3, arg4})
	fake.createVolumeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePool) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakePool) CreateVolumeCalls(stub func(lager.Logger, worker.VolumeSpec, worker.WorkerSpec, db.VolumeType) (worker.Volume, error)) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = stub
}

func (fake *FakePool) CreateVolumeArgsForCall(i int) (lager.Logger, worker.VolumeSpec, worker.WorkerSpec, db.VolumeType) {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	argsForCall := fake.createVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePool) CreateVolumeReturns(result1 worker.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 worker.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakePool) CreateVolumeReturnsOnCall(i int, result1 worker.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	if fake.createVolumeReturnsOnCall == nil {
		fake.createVolumeReturnsOnCall = make(map[int]struct {
			result1 worker.Volume
			result2 error
		})
	}
	fake.createVolumeReturnsOnCall[i] = struct {
		result1 worker.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakePool) FindContainer(arg1 lager.Logger, arg2 int, arg3 string) (worker.Container, bool, error) {
	fake.findContainerMutex.Lock()
	ret, specificReturn := fake.findContainerReturnsOnCall[len(fake.findContainerArgsForCall)]
	fake.findContainerArgsForCall = append(fake.findContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FindContainerStub
	fakeReturns := fake.findContainerReturns
	fake.recordInvocation("FindContainer", []interface{}{arg1, arg2, arg3})
	fake.findContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePool) FindContainerCallCount() int {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return len(fake.findContainerArgsForCall)
}

func (fake *FakePool) FindContainerCalls(stub func(lager.Logger, int, string) (worker.Container, bool, error)) {
	fake.findContainerMutex.Lock()
	defer fake.findContainerMutex.Unlock()
	fake.FindContainerStub = stub
}

func (fake *FakePool) FindContainerArgsForCall(i int) (lager.Logger, int, string) {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	argsForCall := fake.findContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePool) FindContainerReturns(result1 worker.Container, result2 bool, result3 error) {
	fake.findContainerMutex.Lock()
	defer fake.findContainerMutex.Unlock()
	fake.FindContainerStub = nil
	fake.findContainerReturns = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) FindContainerReturnsOnCall(i int, result1 worker.Container, result2 bool, result3 error) {
	fake.findContainerMutex.Lock()
	defer fake.findContainerMutex.Unlock()
	fake.FindContainerStub = nil
	if fake.findContainerReturnsOnCall == nil {
		fake.findContainerReturnsOnCall = make(map[int]struct {
			result1 worker.Container
			result2 bool
			result3 error
		})
	}
	fake.findContainerReturnsOnCall[i] = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) FindVolume(arg1 lager.Logger, arg2 int, arg3 string) (worker.Volume, bool, error) {
	fake.findVolumeMutex.Lock()
	ret, specificReturn := fake.findVolumeReturnsOnCall[len(fake.findVolumeArgsForCall)]
	fake.findVolumeArgsForCall = append(fake.findVolumeArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FindVolumeStub
	fakeReturns := fake.findVolumeReturns
	fake.recordInvocation("FindVolume", []interface{}{arg1, arg2, arg3})
	fake.findVolumeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePool) FindVolumeCallCount() int {
	fake.findVolumeMutex.RLock()
	defer fake.findVolumeMutex.RUnlock()
	return len(fake.findVolumeArgsForCall)
}

func (fake *FakePool) FindVolumeCalls(stub func(lager.Logger, int, string) (worker.Volume, bool, error)) {
	fake.findVolumeMutex.Lock()
	defer fake.findVolumeMutex.Unlock()
	fake.FindVolumeStub = stub
}

func (fake *FakePool) FindVolumeArgsForCall(i int) (lager.Logger, int, string) {
	fake.findVolumeMutex.RLock()
	defer fake.findVolumeMutex.RUnlock()
	argsForCall := fake.findVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePool) FindVolumeReturns(result1 worker.Volume, result2 bool, result3 error) {
	fake.findVolumeMutex.Lock()
	defer fake.findVolumeMutex.Unlock()
	fake.FindVolumeStub = nil
	fake.findVolumeReturns = struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) FindVolumeReturnsOnCall(i int, result1 worker.Volume, result2 bool, result3 error) {
	fake.findVolumeMutex.Lock()
	defer fake.findVolumeMutex.Unlock()
	fake.FindVolumeStub = nil
	if fake.findVolumeReturnsOnCall == nil {
		fake.findVolumeReturnsOnCall = make(map[int]struct {
			result1 worker.Volume
			result2 bool
			result3 error
		})
	}
	fake.findVolumeReturnsOnCall[i] = struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) ReleaseWorker(arg1 context.Context, arg2 worker.ContainerSpec, arg3 worker.Client, arg4 worker.ContainerPlacementStrategy) {
	fake.releaseWorkerMutex.Lock()
	fake.releaseWorkerArgsForCall = append(fake.releaseWorkerArgsForCall, struct {
		arg1 context.Context
		arg2 worker.ContainerSpec
		arg3 worker.Client
		arg4 worker.ContainerPlacementStrategy
	}{arg1, arg2, arg3, arg4})
	stub := fake.ReleaseWorkerStub
	fake.recordInvocation("ReleaseWorker", []interface{}{arg1, arg2, arg3, arg4})
	fake.releaseWorkerMutex.Unlock()
	if stub != nil {
		fake.ReleaseWorkerStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakePool) ReleaseWorkerCallCount() int {
	fake.releaseWorkerMutex.RLock()
	defer fake.releaseWorkerMutex.RUnlock()
	return len(fake.releaseWorkerArgsForCall)
}

func (fake *FakePool) ReleaseWorkerCalls(stub func(context.Context, worker.ContainerSpec, worker.Client, worker.ContainerPlacementStrategy)) {
	fake.releaseWorkerMutex.Lock()
	defer fake.releaseWorkerMutex.Unlock()
	fake.ReleaseWorkerStub = stub
}

func (fake *FakePool) ReleaseWorkerArgsForCall(i int) (context.Context, worker.ContainerSpec, worker.Client, worker.ContainerPlacementStrategy) {
	fake.releaseWorkerMutex.RLock()
	defer fake.releaseWorkerMutex.RUnlock()
	argsForCall := fake.releaseWorkerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePool) SelectWorker(arg1 context.Context, arg2 db.ContainerOwner, arg3 worker.ContainerSpec, arg4 worker.WorkerSpec, arg5 worker.ContainerPlacementStrategy, arg6 worker.PoolCallbacks) (worker.Client, time.Duration, error) {
	fake.selectWorkerMutex.Lock()
	ret, specificReturn := fake.selectWorkerReturnsOnCall[len(fake.selectWorkerArgsForCall)]
	fake.selectWorkerArgsForCall = append(fake.selectWorkerArgsForCall, struct {
		arg1 context.Context
		arg2 db.ContainerOwner
		arg3 worker.ContainerSpec
		arg4 worker.WorkerSpec
		arg5 worker.ContainerPlacementStrategy
		arg6 worker.PoolCallbacks
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.SelectWorkerStub
	fakeReturns := fake.selectWorkerReturns
	fake.recordInvocation("SelectWorker", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.selectWorkerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePool) SelectWorkerCallCount() int {
	fake.selectWorkerMutex.RLock()
	defer fake.selectWorkerMutex.RUnlock()
	return len(fake.selectWorkerArgsForCall)
}

func (fake *FakePool) SelectWorkerCalls(stub func(context.Context, db.ContainerOwner, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy, worker.PoolCallbacks) (worker.Client, time.Duration, error)) {
	fake.selectWorkerMutex.Lock()
	defer fake.selectWorkerMutex.Unlock()
	fake.SelectWorkerStub = stub
}

func (fake *FakePool) SelectWorkerArgsForCall(i int) (context.Context, db.ContainerOwner, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy, worker.PoolCallbacks) {
	fake.selectWorkerMutex.RLock()
	defer fake.selectWorkerMutex.RUnlock()
	argsForCall := fake.selectWorkerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakePool) SelectWorkerReturns(result1 worker.Client, result2 time.Duration, result3 error) {
	fake.selectWorkerMutex.Lock()
	defer fake.selectWorkerMutex.Unlock()
	fake.SelectWorkerStub = nil
	fake.selectWorkerReturns = struct {
		result1 worker.Client
		result2 time.Duration
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) SelectWorkerReturnsOnCall(i int, result1 worker.Client, result2 time.Duration, result3 error) {
	fake.selectWorkerMutex.Lock()
	defer fake.selectWorkerMutex.Unlock()
	fake.SelectWorkerStub = nil
	if fake.selectWorkerReturnsOnCall == nil {
		fake.selectWorkerReturnsOnCall = make(map[int]struct {
			result1 worker.Client
			result2 time.Duration
			result3 error
		})
	}
	fake.selectWorkerReturnsOnCall[i] = struct {
		result1 worker.Client
		result2 time.Duration
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	fake.findVolumeMutex.RLock()
	defer fake.findVolumeMutex.RUnlock()
	fake.releaseWorkerMutex.RLock()
	defer fake.releaseWorkerMutex.RUnlock()
	fake.selectWorkerMutex.RLock()
	defer fake.selectWorkerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.Pool = new(FakePool)
